"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rename;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function rename(scope, oldName, newName) {
  if (oldName === newName) {
    return;
  }

  let binding = scope.getBinding(oldName); // Rename all constant violations

  for (let violation of binding.constantViolations) {
    let bindingIds = violation.getBindingIdentifierPaths(true, false);

    for (let name in bindingIds) {
      if (name === oldName) {
        for (let idPath of bindingIds[name]) {
          idPath.node.name = newName;
        }
      }
    }
  } // Rename all references


  for (let path of binding.referencePaths) {
    if (t.isExportSpecifier(path.parent) && path.parentPath.parent.source) {
      continue;
    }

    if (path.node.name === oldName) {
      path.node.name = newName;
    }
  } // Rename binding identifier, and update scope.


  scope.removeOwnBinding(oldName);
  scope.bindings[newName] = binding;
  binding.identifier.name = newName;
}