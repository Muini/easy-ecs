"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateBundleImports = generateBundleImports;
exports.generateExternalImport = generateExternalImport;
exports.generateExports = generateExports;

var _assert = _interopRequireDefault(require("assert"));

var t = _interopRequireWildcard(require("@babel/types"));

var _template = _interopRequireDefault(require("@babel/template"));

var _utils = require("@parcel/utils");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _utils2 = require("../utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IMPORT_TEMPLATE = _template.default.expression('parcelRequire(ASSET_ID)');

const EXPORT_TEMPLATE = _template.default.statement('parcelRequire.register(ASSET_ID, IDENTIFIER)');

const EXPORT_FN_TEMPLATE = _template.default.statement('parcelRequire.register(ASSET_ID, function() { return IDENTIFIER; })');

const IMPORTSCRIPTS_TEMPLATE = _template.default.statement('importScripts(BUNDLE);');

function generateBundleImports(from, {
  bundle,
  assets
}, path) {
  let statements = [];

  if (from.env.isWorker()) {
    statements.push(IMPORTSCRIPTS_TEMPLATE({
      BUNDLE: t.stringLiteral((0, _utils.relativeBundlePath)(from, bundle))
    }));
  }

  path.unshiftContainer('body', statements);

  for (let asset of assets) {
    // `var ${id};` was inserted already, add RHS
    (0, _nullthrows.default)(path.scope.getBinding((0, _utils2.getName)(asset, 'init'))).path.get('init').replaceWith(IMPORT_TEMPLATE({
      ASSET_ID: t.stringLiteral(asset.id)
    }));
  }
}

function generateExternalImport(_, {
  loc
}) {
  throw (0, _utils2.getThrowableDiagnosticForNode)('External modules are not supported when building for browser', loc === null || loc === void 0 ? void 0 : loc.filePath, loc);
}

function generateExports(bundleGraph, bundle, referencedAssets, path) {
  let exported = new Set();
  let statements = [];

  for (let asset of referencedAssets) {
    let exportsId = (0, _utils2.getName)(asset, 'init');
    exported.add(exportsId);
    statements.push(EXPORT_TEMPLATE({
      ASSET_ID: t.stringLiteral(asset.id),
      IDENTIFIER: t.identifier(exportsId)
    }));
  }

  let entry = bundle.getMainEntry();

  if (entry && !referencedAssets.has(entry) && (!(0, _utils2.isEntry)(bundle, bundleGraph) || (0, _utils2.isReferenced)(bundle, bundleGraph))) {
    let exportsId = (0, _utils2.assertString)(entry.meta.exportsIdentifier);
    exported.add(exportsId);
    statements.push( // Export a function returning the exports, as other cases of global output
    // register init functions.
    EXPORT_FN_TEMPLATE({
      ASSET_ID: t.stringLiteral(entry.id),
      IDENTIFIER: t.identifier((0, _utils2.assertString)(entry.meta.exportsIdentifier))
    }));
  }

  let decls = path.pushContainer('body', statements);

  for (let decl of decls) {
    var _path$scope$getBindin;

    let arg = decl.get('expression.arguments.1');

    if (!arg.isIdentifier()) {
      // anonymous init function expression
      (0, _assert.default)(arg.isFunctionExpression());
      arg = arg.get('body.body.0.argument');
    } // $FlowFixMe


    (_path$scope$getBindin = path.scope.getBinding(arg.node.name)) === null || _path$scope$getBindin === void 0 ? void 0 : _path$scope$getBindin.reference(arg);
  }

  return exported;
}