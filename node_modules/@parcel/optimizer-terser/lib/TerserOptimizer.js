"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _terser = require("terser");

var _plugin = require("@parcel/plugin");

var _utils = require("@parcel/utils");

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _diagnostic = _interopRequireDefault(require("@parcel/diagnostic"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _plugin.Optimizer({
  async optimize({
    contents,
    map,
    bundle,
    options,
    getSourceMapReference
  }) {
    if (!bundle.env.minify) {
      return {
        contents,
        map
      };
    }

    let code = await (0, _utils.blobToString)(contents);
    let userConfig = await (0, _utils.loadConfig)(options.inputFS, _path.default.join(options.projectRoot, 'index'), ['.terserrc', '.uglifyrc', '.uglifyrc.js', '.terserrc.js']);
    let originalMap = map ? await map.stringify({}) : null;
    let config = { ...(userConfig === null || userConfig === void 0 ? void 0 : userConfig.config),
      sourceMap: options.sourceMaps ? {
        filename: _path.default.relative(options.projectRoot, bundle.filePath),
        asObject: true,
        content: originalMap
      } : false,
      toplevel: bundle.env.outputFormat === 'esmodule' || bundle.env.outputFormat === 'commonjs',
      module: bundle.env.outputFormat === 'esmodule'
    };
    let result = (0, _terser.minify)(code, config);

    if (result.error) {
      // $FlowFixMe
      let {
        message,
        line,
        col
      } = result.error;

      if (line != null && col != null) {
        let diagnostic = [];
        let mapping = map === null || map === void 0 ? void 0 : map.findClosestMapping(line, col);

        if (mapping && mapping.original && mapping.source) {
          let {
            source,
            original
          } = mapping;

          let filePath = _path.default.resolve(options.projectRoot, source);

          diagnostic.push({
            message,
            origin: '@parcel/optimizer-terser',
            language: 'js',
            filePath,
            codeFrame: {
              code: await options.inputFS.readFile(filePath, 'utf8'),
              codeHighlights: [{
                message,
                start: original,
                end: original
              }]
            },
            hints: ["It's likely that Terser doesn't support this syntax yet."]
          });
        }

        if (diagnostic.length === 0 || options.logLevel === 'verbose') {
          let loc = {
            line: line,
            column: col
          };
          diagnostic.push({
            message,
            origin: '@parcel/optimizer-terser',
            language: 'js',
            filePath: undefined,
            codeFrame: {
              code,
              codeHighlights: [{
                message,
                start: loc,
                end: loc
              }]
            },
            hints: ["It's likely that Terser doesn't support this syntax yet."]
          });
        }

        throw new _diagnostic.default({
          diagnostic
        });
      } else {
        throw result.error;
      }
    }

    let sourceMap = null;
    let minifiedContents = (0, _nullthrows.default)(result.code);

    if (result.map && typeof result.map !== 'string') {
      sourceMap = new _sourceMap.default();
      sourceMap.addRawMappings(result.map);
      let sourcemapReference = await getSourceMapReference(sourceMap);

      if (sourcemapReference) {
        minifiedContents += `\n//# sourceMappingURL=${sourcemapReference}\n`;
      }
    }

    return {
      contents: minifiedContents,
      map: sourceMap
    };
  }

});

exports.default = _default;