"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadTSConfig = loadTSConfig;

var _ParseConfigHost = require("./ParseConfigHost");

var _path = _interopRequireDefault(require("path"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line import/no-extraneous-dependencies
async function loadTSConfig(config, options) {
  let configResult = await config.getConfig(['tsconfig.json']);

  if (!configResult) {
    return;
  }

  let ts = await options.packageManager.require('typescript', config.searchPath, {
    autoinstall: options.autoinstall
  });
  let host = new _ParseConfigHost.ParseConfigHost(options.inputFS, ts);
  let parsedConfig = ts.parseJsonConfigFileContent(configResult.contents, host, _path.default.dirname((0, _nullthrows.default)(configResult.filePath))); // Add all of the extended config files to be watched

  for (let file of host.filesRead) {
    config.addIncludedFile(_path.default.resolve(file));
  }

  config.setResult(parsedConfig.options);
}