"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _plugin = require("@parcel/plugin");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _plugin.Transformer({
  async loadConfig({
    config
  }) {
    let configFile = await config.getConfig(['.pugrc', '.pugrc.js', 'pug.config.js']);

    if (configFile) {
      let isJavascript = _path.default.extname(configFile.filePath) === '.js';

      if (isJavascript) {
        config.shouldInvalidateOnStartup();
        config.shouldReload();
      }

      config.setResult({
        contents: configFile.contents,
        isSerialisable: !isJavascript
      });
    }
  },

  preSerializeConfig({
    config
  }) {
    if (!config.result) return; // Ensure we dont try to serialise functions

    if (!config.result.isSerialisable) {
      config.result.contents = {};
    }
  },

  async transform({
    asset,
    config,
    options
  }) {
    const pugConfig = config ? config.contents : {};
    const pug = await options.packageManager.require('pug', asset.filePath, {
      autoinstall: options.autoinstall
    });
    const content = await asset.getCode();
    const render = pug.compile(content, {
      degug: true,
      compileDebug: false,
      basedir: _path.default.dirname(asset.filePath),
      filename: asset.filePath,
      pretty: pugConfig.pretty || false,
      doctype: pugConfig.doctype,
      filters: pugConfig.filters,
      filterOptions: pugConfig.filterOptions,
      filterAliases: pugConfig.filterAliases
    });

    for (let filePath of render.dependencies) {
      await asset.addIncludedFile({
        filePath
      });
    }

    asset.type = 'html';
    asset.setCode(render(pugConfig.locals));
    return [asset];
  }

});

exports.default = _default;