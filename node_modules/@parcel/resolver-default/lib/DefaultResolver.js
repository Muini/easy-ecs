"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _nodeResolverCore = _interopRequireDefault(require("@parcel/node-resolver-core"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Throw user friendly errors on special webpack loader syntax
// ex. `imports-loader?$=jquery!./example.js`
const WEBPACK_IMPORT_REGEX = /\S+-loader\S*!\S+/g;

var _default = new _plugin.Resolver({
  resolve({
    dependency,
    options,
    filePath
  }) {
    if (WEBPACK_IMPORT_REGEX.test(dependency.moduleSpecifier)) {
      throw new Error(`The import path: ${dependency.moduleSpecifier} is using webpack specific loader import syntax, which isn't supported by Parcel.`);
    }

    let mainFields = ['source', 'browser']; // If scope hoisting is enabled, we can get smaller builds using esmodule input, so choose `module` over `main`.
    // Otherwise, we'd be wasting time transforming esmodules to commonjs, so choose `main` over `module`.

    if (dependency.env.scopeHoist) {
      mainFields.push('module', 'main');
    } else {
      mainFields.push('main', 'module');
    }

    const resolver = new _nodeResolverCore.default({
      extensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'css', 'styl'],
      mainFields,
      options
    });
    return resolver.resolve({
      filename: filePath,
      isURL: dependency.isURL,
      parent: dependency.sourcePath,
      env: dependency.env
    });
  }

});

exports.default = _default;