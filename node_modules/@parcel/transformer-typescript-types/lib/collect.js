"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collect = collect;

var _TSModule = require("./TSModule");

var _utils = require("./utils");

// eslint-disable-line import/no-extraneous-dependencies
function collect(ts, moduleGraph, context, sourceFile) {
  let currentModule;

  let visit = node => {
    if (ts.isBundle(node)) {
      return ts.updateBundle(node, ts.visitNodes(node.sourceFiles, visit));
    }

    if (ts.isModuleDeclaration(node)) {
      currentModule = new _TSModule.TSModule();
      moduleGraph.addModule(node.name.text, currentModule);
    }

    if (!currentModule) {
      return ts.visitEachChild(node, visit, context);
    }

    if (ts.isImportDeclaration(node) && node.importClause) {
      if (node.importClause.namedBindings) {
        if (node.importClause.namedBindings.elements) {
          for (let element of node.importClause.namedBindings.elements) {
            var _element$propertyName;

            currentModule.addImport(element.name.text, node.moduleSpecifier.text, ((_element$propertyName = element.propertyName) !== null && _element$propertyName !== void 0 ? _element$propertyName : element.name).text);
          }
        } else if (node.importClause.namedBindings.name) {
          currentModule.addImport(node.importClause.namedBindings.name.text, node.moduleSpecifier.text, '*');
        }
      } else if (node.importClause.name) {
        currentModule.addImport(node.importClause.name, node.moduleSpecifier.text, 'default');
      }
    }

    if (ts.isExportDeclaration(node)) {
      if (node.exportClause) {
        for (let element of node.exportClause.elements) {
          if (node.moduleSpecifier) {
            var _element$propertyName2;

            currentModule.addExport(element.name.text, ((_element$propertyName2 = element.propertyName) !== null && _element$propertyName2 !== void 0 ? _element$propertyName2 : element.name).text, node.moduleSpecifier.text);
          } else {
            var _element$propertyName3;

            currentModule.addExport(element.name.text, ((_element$propertyName3 = element.propertyName) !== null && _element$propertyName3 !== void 0 ? _element$propertyName3 : element.name).text);
          }
        }
      } else {
        currentModule.addWildcardExport(node.moduleSpecifier.text);
      }
    }

    if ((0, _utils.isDeclaration)(ts, node)) {
      if (node.name) {
        currentModule.addLocal(node.name.text, node);
      }

      let name = (0, _utils.getExportedName)(ts, node);

      if (name) {
        currentModule.addLocal(name, node);
        currentModule.addExport(name, name);
      }
    }

    if (ts.isVariableStatement(node)) {
      let isExported = node.modifiers.some(m => m.kind === ts.SyntaxKind.ExportKeyword);

      for (let v of node.declarationList.declarations) {
        currentModule.addLocal(v.name.text, v);

        if (isExported) {
          currentModule.addExport(v.name.text, v.name.text);
        }
      }
    }

    return ts.visitEachChild(node, visit, context);
  };

  return ts.visitNode(sourceFile, visit);
}