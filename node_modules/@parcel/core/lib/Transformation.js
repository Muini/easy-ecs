"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _path = _interopRequireDefault(require("path"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _utils = require("@parcel/utils");

var _logger = require("@parcel/logger");

var _sourceMap = require("@parcel/source-map");

var _diagnostic = _interopRequireWildcard(require("@parcel/diagnostic"));

var _ConfigLoader = _interopRequireDefault(require("./ConfigLoader"));

var _Dependency = require("./Dependency");

var _ParcelConfig = _interopRequireDefault(require("./ParcelConfig"));

var _ResolverRunner = _interopRequireDefault(require("./ResolverRunner"));

var _Asset = require("./public/Asset");

var _UncommittedAsset = _interopRequireDefault(require("./UncommittedAsset"));

var _assetUtils = require("./assetUtils");

var _summarizeRequest = _interopRequireDefault(require("./summarizeRequest"));

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

var _constants = require("./constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Transformation {
  constructor({
    report,
    request,
    options,
    config,
    workerApi
  }) {
    _defineProperty(this, "request", void 0);

    _defineProperty(this, "configLoader", void 0);

    _defineProperty(this, "configRequests", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "impactfulOptions", void 0);

    _defineProperty(this, "workerApi", void 0);

    _defineProperty(this, "parcelConfig", void 0);

    _defineProperty(this, "report", void 0);

    this.configRequests = [];
    this.configLoader = new _ConfigLoader.default({
      options,
      config
    });
    this.parcelConfig = config;
    this.options = options;
    this.report = report;
    this.request = request;
    this.workerApi = workerApi; // TODO: these options may not impact all transformations, let transformers decide if they care or not

    let {
      hot
    } = this.options;
    this.impactfulOptions = {
      hot
    };
  }

  async loadConfig(configRequest) {
    let result = await this.configLoader.load(configRequest);
    this.configRequests.push({
      request: configRequest,
      result
    });
    return result;
  }

  async run() {
    await _sourceMap.init;
    this.report({
      type: 'buildProgress',
      phase: 'transforming',
      filePath: this.request.filePath
    });
    let asset = await this.loadAsset();
    let pipeline = await this.loadPipeline(this.request.filePath, asset.value.isSource, this.request.pipeline);
    let results = await this.runPipelines(pipeline, asset);
    let assets = results.map(a => a.value);

    for (let {
      request,
      result
    } of this.configRequests) {
      if (request.plugin != null) {
        let resolveFrom = request.meta.parcelConfigPath;

        if (typeof resolveFrom !== 'string') {
          throw new Error('request.meta.parcelConfigPath should be a string!');
        }

        let {
          plugin
        } = await this.parcelConfig.loadPlugin({
          packageName: request.plugin,
          resolveFrom
        });

        if (plugin && plugin.preSerializeConfig) {
          plugin.preSerializeConfig({
            config: result
          });
        }
      }
    }

    return {
      assets,
      configRequests: this.configRequests
    };
  }

  async loadAsset() {
    let {
      filePath,
      env,
      code,
      pipeline,
      isSource: isSourceOverride,
      sideEffects
    } = this.request;
    let {
      content,
      size,
      hash,
      isSource: summarizedIsSource
    } = await (0, _summarizeRequest.default)(this.options.inputFS, this.request); // Prefer `isSource` originating from the AssetRequest.

    let isSource = isSourceOverride !== null && isSourceOverride !== void 0 ? isSourceOverride : summarizedIsSource; // If the transformer request passed code rather than a filename,
    // use a hash as the base for the id to ensure it is unique.

    let idBase = code != null ? hash : (0, _utils.normalizeSeparators)(_path.default.relative(this.options.projectRoot, filePath));
    return new _UncommittedAsset.default({
      idBase,
      value: (0, _assetUtils.createAsset)({
        idBase,
        filePath,
        isSource,
        type: _path.default.extname(filePath).slice(1),
        hash,
        pipeline,
        env,
        stats: {
          time: 0,
          size
        },
        sideEffects
      }),
      options: this.options,
      content
    });
  }

  async runPipelines(pipeline, initialAsset) {
    var _ref;

    let initialType = initialAsset.value.type;
    let initialAssetCacheKey = this.getCacheKey([initialAsset], pipeline.configs);
    let initialCacheEntry = await this.readFromCache(initialAssetCacheKey);
    let assets = initialCacheEntry || (await this.runPipeline(pipeline, initialAsset));

    if (!initialCacheEntry) {
      await this.writeToCache(initialAssetCacheKey, assets, pipeline.configs);
    }

    let finalAssets = [];

    for (let asset of assets) {
      let nextPipeline;

      if (asset.value.type !== initialType) {
        nextPipeline = await this.loadNextPipeline({
          filePath: initialAsset.value.filePath,
          isSource: asset.value.isSource,
          nextType: asset.value.type,
          currentPipeline: pipeline
        });
      }

      if (nextPipeline) {
        let nextPipelineAssets = await this.runPipelines(nextPipeline, asset);
        finalAssets = finalAssets.concat(nextPipelineAssets);
      } else {
        finalAssets.push(asset);
      }
    }

    if (!pipeline.postProcess) {
      return finalAssets;
    }

    let processedCacheEntry = await this.readFromCache(this.getCacheKey(finalAssets, pipeline.configs));
    (0, _assert.default)(pipeline.postProcess != null);
    let processedFinalAssets = (_ref = processedCacheEntry !== null && processedCacheEntry !== void 0 ? processedCacheEntry : await pipeline.postProcess(finalAssets)) !== null && _ref !== void 0 ? _ref : [];

    if (!processedCacheEntry) {
      await this.writeToCache(this.getCacheKey(processedFinalAssets, pipeline.configs), processedFinalAssets, pipeline.configs);
    }

    return processedFinalAssets;
  }

  async runPipeline(pipeline, initialAsset) {
    let initialType = initialAsset.value.type;
    let inputAssets = [initialAsset];
    let resultingAssets = [];
    let finalAssets = [];

    for (let transformer of pipeline.transformers) {
      resultingAssets = [];

      for (let asset of inputAssets) {
        if (asset.value.type !== initialType && (await this.loadNextPipeline({
          filePath: initialAsset.value.filePath,
          isSource: asset.value.isSource,
          nextType: asset.value.type,
          currentPipeline: pipeline
        }))) {
          finalAssets.push(asset);
          continue;
        }

        try {
          let transformerResults = await runTransformer(pipeline, asset, transformer.plugin, transformer.name, transformer.config, this.parcelConfig);

          for (let result of transformerResults) {
            resultingAssets.push(asset.createChildAsset(result, transformer.name, this.parcelConfig.filePath));
          }
        } catch (e) {
          throw new _diagnostic.default({
            diagnostic: (0, _diagnostic.errorToDiagnostic)(e, transformer.name)
          });
        }
      }

      inputAssets = resultingAssets;
    } // Make assets with ASTs generate unless they are js assets and target uses
    // scope hoisting. This parallelizes generation and distributes work more
    // evenly across workers than if one worker needed to generate all assets in
    // a large bundle during packaging.


    let generate = pipeline.generate;

    if (generate != null) {
      await Promise.all(resultingAssets.filter(asset => asset.ast != null && !(asset.value.type === 'js' && asset.value.env.scopeHoist)).map(async asset => {
        if (asset.isASTDirty) {
          var _output$map;

          let output = await generate(asset);
          asset.content = output.content;
          asset.mapBuffer = (_output$map = output.map) === null || _output$map === void 0 ? void 0 : _output$map.toBuffer();
        }

        asset.clearAST();
      }));
    }

    return finalAssets.concat(resultingAssets);
  }

  async readFromCache(cacheKey) {
    if (this.options.disableCache || this.request.code != null) {
      return null;
    }

    let cachedAssets = await this.options.cache.get(cacheKey);

    if (!cachedAssets) {
      return null;
    }

    return cachedAssets.map(value => new _UncommittedAsset.default({
      value,
      options: this.options
    }));
  }

  async writeToCache(cacheKey, assets, configs) {
    await Promise.all( // TODO: account for impactfulOptions maybe being different per pipeline
    assets.map(asset => asset.commit((0, _utils.md5FromObject)({
      impactfulOptions: this.impactfulOptions,
      configs: getImpactfulConfigInfo(configs)
    }))));
    this.options.cache.set(cacheKey, assets.map(a => a.value));
  }

  getCacheKey(assets, configs) {
    let assetsKeyInfo = assets.map(a => ({
      filePath: a.value.filePath,
      hash: a.value.hash,
      uniqueKey: a.value.uniqueKey
    }));
    return (0, _utils.md5FromObject)({
      parcelVersion: _constants.PARCEL_VERSION,
      assets: assetsKeyInfo,
      configs: getImpactfulConfigInfo(configs),
      env: this.request.env,
      impactfulOptions: this.impactfulOptions
    });
  }

  async loadPipeline(filePath, isSource, pipelineName) {
    let configRequest = {
      filePath,
      env: this.request.env,
      isSource,
      pipeline: pipelineName,
      meta: {
        actionType: 'transformation'
      }
    };
    let configs = new Map();
    let config = await this.loadConfig(configRequest);
    configs.set('parcel', config);
    let transformers = await this.parcelConfig.getTransformers(filePath, pipelineName);

    for (let {
      name,
      resolveFrom
    } of transformers) {
      let thirdPartyConfig = await this.loadTransformerConfig({
        filePath,
        plugin: name,
        parcelConfigPath: resolveFrom,
        isSource
      });
      configs.set(name, thirdPartyConfig);
    }

    let pipeline = {
      id: transformers.map(t => t.name).join(':'),
      transformers: transformers.map(transformer => {
        var _configs$get;

        return {
          name: transformer.name,
          config: (_configs$get = configs.get(transformer.name)) === null || _configs$get === void 0 ? void 0 : _configs$get.result,
          plugin: transformer.plugin
        };
      }),
      configs,
      options: this.options,
      resolverRunner: new _ResolverRunner.default({
        config: this.parcelConfig,
        options: this.options
      }),
      pluginOptions: new _PluginOptions.default(this.options),
      workerApi: this.workerApi
    };
    return pipeline;
  }

  async loadNextPipeline({
    filePath,
    isSource,
    nextType,
    currentPipeline
  }) {
    let nextFilePath = filePath.slice(0, -_path.default.extname(filePath).length) + '.' + nextType;
    let nextPipeline = await this.loadPipeline(nextFilePath, isSource, this.request.pipeline);

    if (nextPipeline.id === currentPipeline.id) {
      return null;
    }

    return nextPipeline;
  }

  loadTransformerConfig({
    filePath,
    plugin,
    parcelConfigPath,
    isSource
  }) {
    let configRequest = {
      filePath,
      env: this.request.env,
      plugin,
      isSource,
      meta: {
        parcelConfigPath
      }
    };
    return this.loadConfig(configRequest);
  }

}

exports.default = Transformation;

async function runTransformer(pipeline, asset, transformer, transformerName, preloadedConfig, parcelConfig) {
  const logger = new _logger.PluginLogger({
    origin: transformerName
  });

  const resolve = async (from, to) => {
    return (0, _nullthrows.default)((await pipeline.resolverRunner.resolve((0, _Dependency.createDependency)({
      env: asset.value.env,
      moduleSpecifier: to,
      sourcePath: from
    })))).filePath;
  }; // If an ast exists on the asset, but we cannot reuse it,
  // use the previous transform to generate code that we can re-parse.


  if (asset.ast && asset.isASTDirty && (!transformer.canReuseAST || !transformer.canReuseAST({
    ast: asset.ast,
    options: pipeline.pluginOptions,
    logger
  })) && pipeline.generate) {
    var _output$map2;

    let output = await pipeline.generate(asset);
    asset.content = output.content;
    asset.mapBuffer = (_output$map2 = output.map) === null || _output$map2 === void 0 ? void 0 : _output$map2.toBuffer();
  } // Load config for the transformer.


  let config = preloadedConfig; // Parse if there is no AST available from a previous transform.

  if (!asset.ast && transformer.parse) {
    let ast = await transformer.parse({
      asset: new _Asset.MutableAsset(asset),
      config,
      options: pipeline.pluginOptions,
      resolve,
      logger
    });

    if (ast) {
      asset.setAST(ast);
      asset.isASTDirty = false;
    }
  } // Transform.


  let results = await normalizeAssets(( // $FlowFixMe
  await transformer.transform({
    asset: new _Asset.MutableAsset(asset),
    ast: asset.ast,
    config,
    options: pipeline.pluginOptions,
    resolve,
    logger
  }))); // Create generate and postProcess functions that can be called later

  pipeline.generate = input => {
    if (transformer.generate && input.ast) {
      let generated = transformer.generate({
        asset: new _Asset.Asset(input),
        ast: input.ast,
        options: pipeline.pluginOptions,
        logger
      });
      input.clearAST();
      return Promise.resolve(generated);
    }

    throw new Error('Asset has an AST but no generate method is available on the transform');
  }; // For Flow


  let postProcess = transformer.postProcess;

  if (postProcess) {
    pipeline.postProcess = async assets => {
      let results = await postProcess.call(transformer, {
        assets: assets.map(asset => new _Asset.MutableAsset(asset)),
        config,
        options: pipeline.pluginOptions,
        resolve,
        logger
      });
      return Promise.all(results.map(result => asset.createChildAsset(result, transformerName, parcelConfig.filePath)));
    };
  }

  return results;
}

function normalizeAssets(results) {
  return Promise.all(results.map(async result => {
    if (!(result instanceof _Asset.MutableAsset)) {
      return result;
    }

    let internalAsset = (0, _Asset.mutableAssetToUncommittedAsset)(result);
    return {
      ast: internalAsset.ast,
      content: await internalAsset.content,
      // $FlowFixMe
      dependencies: [...internalAsset.value.dependencies.values()],
      env: internalAsset.value.env,
      filePath: result.filePath,
      includedFiles: result.getIncludedFiles(),
      isInline: result.isInline,
      isIsolated: result.isIsolated,
      map: await internalAsset.getMap(),
      meta: result.meta,
      pipeline: internalAsset.value.pipeline,
      type: result.type,
      uniqueKey: internalAsset.value.uniqueKey
    };
  }));
}

function getImpactfulConfigInfo(configs) {
  let impactfulConfigInfo = {};

  for (let [configType, {
    devDeps,
    resultHash
  }] of configs) {
    let devDepsObject = {};

    for (let [moduleName, version] of devDeps) {
      devDepsObject[moduleName] = version;
    }

    impactfulConfigInfo[configType] = {
      devDeps: devDepsObject,
      resultHash
    };
  }

  return impactfulConfigInfo;
}