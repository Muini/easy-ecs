"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RequestTracker = require("../RequestTracker");

var _ResolverRunner = _interopRequireDefault(require("../ResolverRunner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DepPathRequestRunner extends _RequestTracker.RequestRunner {
  constructor(opts) {
    super(opts);

    _defineProperty(this, "resolverRunner", void 0);

    _defineProperty(this, "assetGraph", void 0);

    this.type = 'dep_path_request';
    let {
      options,
      config,
      assetGraph
    } = opts;
    this.resolverRunner = new _ResolverRunner.default({
      options,
      config
    });
    this.assetGraph = assetGraph;
  }

  run(request) {
    return this.resolverRunner.resolve(request);
  }

  onComplete(request, result, api) {
    let dependency = request;
    let assetGroup = result;

    if (!assetGroup) {
      this.assetGraph.resolveDependency(dependency, null, api.getId());
      return;
    }

    this.assetGraph.resolveDependency(dependency, assetGroup, api.getId()); // ? Should this happen if asset is deferred?

    api.invalidateOnFileDelete(assetGroup.filePath);
  }

}

exports.default = DepPathRequestRunner;