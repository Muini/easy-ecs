"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _loadParcelConfig = _interopRequireDefault(require("../loadParcelConfig"));

var _RequestTracker = require("../RequestTracker");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ParcelConfigRequestRunner extends _RequestTracker.RequestRunner {
  constructor(opts) {
    super(opts);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "workerFarm", void 0);

    _defineProperty(this, "disposeConfigRef", void 0);

    this.workerFarm = opts.workerFarm;
    this.options = opts.options;
    this.type = 'parcel_config_request';
  }

  async run(request, api) {
    var _this$options$default;

    let {
      config,
      extendedFiles
    } = await (0, _loadParcelConfig.default)(this.options);
    let processedConfig = config.getConfig();
    let {
      ref,
      dispose
    } = await this.workerFarm.createSharedReference(processedConfig);
    this.disposeConfigRef && (await this.disposeConfigRef());
    this.disposeConfigRef = dispose;
    api.invalidateOnFileUpdate(config.filePath);
    api.invalidateOnFileDelete(config.filePath);

    for (let filePath of extendedFiles) {
      api.invalidateOnFileUpdate(filePath);
      api.invalidateOnFileDelete(filePath);
    }

    if (config.filePath === ((_this$options$default = this.options.defaultConfig) === null || _this$options$default === void 0 ? void 0 : _this$options$default.filePath)) {
      api.invalidateOnFileCreate('**/.parcelrc');
    } // Need to do this because of reinstantiate the shared reference


    api.invalidateOnStartup();
    let result = {
      config: processedConfig,
      configRef: ref
    };
    api.storeResult(result);
    return result;
  }

}

exports.default = ParcelConfigRequestRunner;