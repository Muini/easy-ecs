"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _utils = require("@parcel/utils");

var _RequestTracker = require("../RequestTracker");

var _EntryResolver = require("../EntryResolver");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class EntryRequestRunner extends _RequestTracker.RequestRunner {
  constructor(opts) {
    super(opts);

    _defineProperty(this, "entryResolver", void 0);

    _defineProperty(this, "assetGraph", void 0);

    this.type = 'entry_request';
    this.entryResolver = new _EntryResolver.EntryResolver(opts.options);
    this.assetGraph = opts.assetGraph;
  }

  run(request) {
    return this.entryResolver.resolveEntry(request);
  }

  onComplete(request, result, api) {
    this.assetGraph.resolveEntry(request, result.entries, api.getId()); // Connect files like package.json that affect the entry
    // resolution so we invalidate when they change.

    for (let file of result.files) {
      api.invalidateOnFileUpdate(file.filePath);
    } // If the entry specifier is a glob, add a glob node so
    // we invalidate when a new file matches.


    if ((0, _utils.isGlob)(request)) {
      api.invalidateOnFileCreate(request);
    }
  }

}

exports.default = EntryRequestRunner;