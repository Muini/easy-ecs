"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

let parcelOptionsToPluginOptions = new WeakMap();

class PluginOptions {
  // ParcelOptions
  constructor(options) {
    _options.set(this, {
      writable: true,
      value: void 0
    });

    let existing = parcelOptionsToPluginOptions.get(options);

    if (existing != null) {
      return existing;
    }

    _classPrivateFieldSet(this, _options, options);

    parcelOptionsToPluginOptions.set(options, this);
  }

  get instanceId() {
    return _classPrivateFieldGet(this, _options).instanceId;
  }

  get mode() {
    return _classPrivateFieldGet(this, _options).mode;
  }

  get sourceMaps() {
    return _classPrivateFieldGet(this, _options).sourceMaps;
  }

  get env() {
    return _classPrivateFieldGet(this, _options).env;
  }

  get hot() {
    return _classPrivateFieldGet(this, _options).hot;
  }

  get serve() {
    return _classPrivateFieldGet(this, _options).serve;
  }

  get autoinstall() {
    return _classPrivateFieldGet(this, _options).autoinstall;
  }

  get logLevel() {
    return _classPrivateFieldGet(this, _options).logLevel;
  }

  get rootDir() {
    return _classPrivateFieldGet(this, _options).rootDir;
  }

  get distDir() {
    return _classPrivateFieldGet(this, _options).distDir;
  }

  get cacheDir() {
    // TODO: remove this. Probably bad if there are other types of caches.
    // Maybe expose the Cache object instead?
    return _classPrivateFieldGet(this, _options).cacheDir;
  }

  get projectRoot() {
    return _classPrivateFieldGet(this, _options).projectRoot;
  }

  get inputFS() {
    return _classPrivateFieldGet(this, _options).inputFS;
  }

  get outputFS() {
    return _classPrivateFieldGet(this, _options).outputFS;
  }

  get packageManager() {
    return _classPrivateFieldGet(this, _options).packageManager;
  }

  get detailedReport() {
    return _classPrivateFieldGet(this, _options).detailedReport || 0;
  }

}

exports.default = PluginOptions;

var _options = new WeakMap();