"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.environmentToInternalEnvironment = environmentToInternalEnvironment;
exports.default = exports.BROWSER_ENVS = void 0;

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _browserslist = _interopRequireDefault(require("browserslist"));

var _semver = _interopRequireDefault(require("semver"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

const BROWSER_ENVS = new Set(['browser', 'web-worker', 'service-worker', 'electron-renderer']);
exports.BROWSER_ENVS = BROWSER_ENVS;
const ELECTRON_ENVS = new Set(['electron-main', 'electron-renderer']);
const NODE_ENVS = new Set(['node', ...ELECTRON_ENVS]);
const WORKER_ENVS = new Set(['web-worker', 'service-worker']);
const ISOLATED_ENVS = WORKER_ENVS;
const ALL_BROWSERS = ['chrome', 'and_chr', 'edge', 'firefox', 'and_ff', 'safari', 'ios', 'samsung', 'opera', 'ie', 'op_mini', 'blackberry', 'op_mob', 'ie_mob', 'and_uc', 'and_qq', 'baidu', 'kaios'];
const ESMODULE_BROWSERS = {
  edge: '16',
  firefox: '60',
  chrome: '61',
  safari: '11',
  opera: '48',
  ios: '11',
  android: '76',
  and_chr: '76',
  and_ff: '68',
  samsung: '8.2'
};
const internalEnvironmentToEnvironment = new WeakMap();

const _environmentToInternalEnvironment = new WeakMap();

function environmentToInternalEnvironment(environment) {
  return (0, _nullthrows.default)(_environmentToInternalEnvironment.get(environment));
}

class Environment {
  // InternalEnvironment
  constructor(env) {
    _environment.set(this, {
      writable: true,
      value: void 0
    });

    let existing = internalEnvironmentToEnvironment.get(env);

    if (existing != null) {
      return existing;
    }

    _classPrivateFieldSet(this, _environment, env);

    _environmentToInternalEnvironment.set(this, env);

    internalEnvironmentToEnvironment.set(env, this);
  }

  get context() {
    return _classPrivateFieldGet(this, _environment).context;
  }

  get engines() {
    return _classPrivateFieldGet(this, _environment).engines;
  }

  get includeNodeModules() {
    return _classPrivateFieldGet(this, _environment).includeNodeModules;
  }

  get outputFormat() {
    return _classPrivateFieldGet(this, _environment).outputFormat;
  }

  get isLibrary() {
    return _classPrivateFieldGet(this, _environment).isLibrary;
  }

  get minify() {
    return _classPrivateFieldGet(this, _environment).minify;
  }

  get scopeHoist() {
    return _classPrivateFieldGet(this, _environment).scopeHoist;
  }

  isBrowser() {
    return BROWSER_ENVS.has(_classPrivateFieldGet(this, _environment).context);
  }

  isNode() {
    return NODE_ENVS.has(_classPrivateFieldGet(this, _environment).context);
  }

  isElectron() {
    return ELECTRON_ENVS.has(_classPrivateFieldGet(this, _environment).context);
  }

  isIsolated() {
    return ISOLATED_ENVS.has(_classPrivateFieldGet(this, _environment).context);
  }

  isWorker() {
    return WORKER_ENVS.has(_classPrivateFieldGet(this, _environment).context);
  }

  matchesEngines(minVersions) {
    // Determine if the environment matches some minimum version requirements.
    // For browsers, we run a browserslist query with and without the minimum
    // required browsers and compare the lists. For node, we just check semver.
    if (this.isBrowser() && this.engines.browsers != null) {
      let targetBrowsers = this.engines.browsers;
      let browsers = targetBrowsers != null && !Array.isArray(targetBrowsers) ? [targetBrowsers] : targetBrowsers; // If outputting esmodules, exclude browsers without support.

      if (this.outputFormat === 'esmodule') {
        browsers = [...browsers, ...getExcludedBrowsers(ESMODULE_BROWSERS)];
      }

      let matchedBrowsers = (0, _browserslist.default)(browsers);
      let minBrowsers = getExcludedBrowsers(minVersions);
      let withoutMinBrowsers = (0, _browserslist.default)([...browsers, ...minBrowsers]);
      return matchedBrowsers.length === withoutMinBrowsers.length;
    } else if (this.isNode() && this.engines.node != null && minVersions.node) {
      return !_semver.default.intersects(`< ${minVersions.node}`, this.engines.node);
    }

    return false;
  }

}

exports.default = Environment;

var _environment = new WeakMap();

function getExcludedBrowsers(minVersions) {
  let browsers = [];

  for (let browser of ALL_BROWSERS) {
    let version = minVersions[browser];

    if (version) {
      browsers.push(`not ${browser} < ${version}`);
    } else {
      browsers.push(`not ${browser} > 0`);
    }
  }

  return browsers;
}