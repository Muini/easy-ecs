"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nodeFromDep = nodeFromDep;
exports.nodeFromAssetGroup = nodeFromAssetGroup;
exports.nodeFromAsset = nodeFromAsset;
exports.nodeFromEntrySpecifier = nodeFromEntrySpecifier;
exports.nodeFromEntryFile = nodeFromEntryFile;
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _crypto = _interopRequireDefault(require("crypto"));

var _utils = require("@parcel/utils");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _Graph = _interopRequireDefault(require("./Graph"));

var _Dependency = require("./Dependency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function nodeFromDep(dep) {
  return {
    id: dep.id,
    type: 'dependency',
    value: dep
  };
}

function nodeFromAssetGroup(assetGroup) {
  return {
    id: (0, _utils.md5FromObject)(assetGroup),
    type: 'asset_group',
    value: assetGroup
  };
}

function nodeFromAsset(asset) {
  return {
    id: asset.id,
    type: 'asset',
    value: asset
  };
}

function nodeFromEntrySpecifier(entry) {
  return {
    id: 'entry_specifier:' + entry,
    type: 'entry_specifier',
    value: entry
  };
}

function nodeFromEntryFile(entry) {
  return {
    id: 'entry_file:' + (0, _utils.md5FromObject)(entry),
    type: 'entry_file',
    value: entry
  };
}

class AssetGraph extends _Graph.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onNodeRemoved", void 0);

    _defineProperty(this, "hash", void 0);
  }

  // $FlowFixMe
  static deserialize(opts) {
    // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381
    let res = new AssetGraph(opts); // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381

    res.hash = opts.hash;
    return res;
  } // $FlowFixMe


  serialize() {
    // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381
    return { ...super.serialize(),
      hash: this.hash
    };
  }

  initOptions({
    onNodeRemoved
  } = {}) {
    this.onNodeRemoved = onNodeRemoved;
  }

  initialize({
    entries,
    assetGroups
  }) {
    let rootNode = {
      id: '@@root',
      type: 'root',
      value: null
    };
    this.setRootNode(rootNode);
    let nodes = [];

    if (entries) {
      for (let entry of entries) {
        let node = nodeFromEntrySpecifier(entry);
        nodes.push(node);
      }
    } else if (assetGroups) {
      nodes.push(...assetGroups.map(assetGroup => nodeFromAssetGroup(assetGroup)));
    }

    this.replaceNodesConnectedTo(rootNode, nodes);
  }

  addNode(node) {
    this.hash = null;
    return super.addNode(node);
  }

  removeNode(node) {
    this.hash = null;
    this.onNodeRemoved && this.onNodeRemoved(node);
    return super.removeNode(node);
  }

  resolveEntry(entry, resolved, correspondingRequest) {
    let entrySpecifierNode = (0, _nullthrows.default)(this.getNode(nodeFromEntrySpecifier(entry).id));
    (0, _assert.default)(entrySpecifierNode.type === 'entry_specifier');
    entrySpecifierNode.correspondingRequest = correspondingRequest;
    let entryFileNodes = resolved.map(file => nodeFromEntryFile(file));
    this.replaceNodesConnectedTo(entrySpecifierNode, entryFileNodes);
  }

  resolveTargets(entry, targets, correspondingRequest) {
    let depNodes = targets.map(target => nodeFromDep((0, _Dependency.createDependency)({
      moduleSpecifier: entry.filePath,
      pipeline: target.name,
      target: target,
      env: target.env,
      isEntry: true
    })));
    let entryNode = (0, _nullthrows.default)(this.getNode(nodeFromEntryFile(entry).id));
    (0, _assert.default)(entryNode.type === 'entry_file');
    entryNode.correspondingRequest = correspondingRequest;

    if (this.hasNode(entryNode.id)) {
      this.replaceNodesConnectedTo(entryNode, depNodes);
    }
  }

  resolveDependency(dependency, assetGroup, correspondingRequest) {
    let depNode = (0, _nullthrows.default)(this.nodes.get(dependency.id));
    (0, _assert.default)(depNode.type === 'dependency');
    if (!depNode) return;
    depNode.correspondingRequest = correspondingRequest;

    if (!assetGroup) {
      return;
    }

    let assetGroupNode = nodeFromAssetGroup(assetGroup);
    let existingAssetGroupNode = this.getNode(assetGroupNode.id);
    this.replaceNodesConnectedTo(depNode, [existingAssetGroupNode !== null && existingAssetGroupNode !== void 0 ? existingAssetGroupNode : assetGroupNode]);
  }

  shouldVisitChild(node, childNode) {
    if (node.type !== 'dependency' || childNode.type !== 'asset_group' || childNode.deferred === false) {
      return true;
    }

    let sideEffects = childNode.value.sideEffects;
    let dependency = node.value;
    let previouslyDeferred = childNode.deferred;
    let defer = this.shouldDeferDependency(dependency, sideEffects);
    node.hasDeferred = defer;
    childNode.deferred = defer;

    if (!previouslyDeferred && defer) {
      this.markParentsWithHasDeferred(node);
    } else if (previouslyDeferred && !defer) {
      this.unmarkParentsWithHasDeferred(node);
    }

    return !defer;
  }

  markParentsWithHasDeferred(node) {
    this.traverseAncestors(node, (_node, _, actions) => {
      if (_node.type === 'asset') {
        _node.hasDeferred = true;
      } else if (_node.type === 'asset_group') {
        _node.hasDeferred = true;
        actions.skipChildren();
      } else if (node !== _node) {
        actions.skipChildren();
      }
    });
  }

  unmarkParentsWithHasDeferred(node) {
    this.traverseAncestors(node, (_node, ctx, actions) => {
      if (_node.type === 'asset') {
        let hasDeferred = this.getNodesConnectedFrom(_node).some(_childNode => _childNode.hasDeferred == null ? false : _childNode.hasDeferred);

        if (!hasDeferred) {
          delete _node.hasDeferred;
        }

        return {
          hasDeferred
        };
      } else if (_node.type === 'asset_group') {
        if (!(ctx === null || ctx === void 0 ? void 0 : ctx.hasDeferred)) {
          delete _node.hasDeferred;
        }

        actions.skipChildren();
      } else if (node !== _node) {
        actions.skipChildren();
      }
    });
  } // Defer transforming this dependency if it is marked as weak, there are no side effects,
  // no re-exported symbols are used by ancestor dependencies and the re-exporting asset isn't
  // using a wildcard and isn't an entry (in library mode).
  // This helps with performance building large libraries like `lodash-es`, which re-exports
  // a huge number of functions since we can avoid even transforming the files that aren't used.


  shouldDeferDependency(dependency, sideEffects) {
    let defer = false;

    if (dependency.isWeak && sideEffects === false && !dependency.symbols.has('*')) {
      let depNode = this.getNode(dependency.id);
      (0, _assert.default)(depNode);
      let assets = this.getNodesConnectedTo(depNode);
      let symbols = new Map([...dependency.symbols].map(([key, val]) => [val.local, key]));
      (0, _assert.default)(assets.length === 1);
      let firstAsset = assets[0];
      (0, _assert.default)(firstAsset.type === 'asset');
      let resolvedAsset = firstAsset.value;
      let deps = this.getIncomingDependencies(resolvedAsset);
      defer = deps.every(d => !(d.env.isLibrary && d.isEntry) && !d.symbols.has('*') && ![...d.symbols.keys()].some(symbol => {
        var _resolvedAsset$symbol, _resolvedAsset$symbol2;

        let assetSymbol = (_resolvedAsset$symbol = resolvedAsset.symbols) === null || _resolvedAsset$symbol === void 0 ? void 0 : (_resolvedAsset$symbol2 = _resolvedAsset$symbol.get(symbol)) === null || _resolvedAsset$symbol2 === void 0 ? void 0 : _resolvedAsset$symbol2.local;
        return assetSymbol != null && symbols.has(assetSymbol);
      }));
    }

    return defer;
  }

  resolveAssetGroup(assetGroup, assets, correspondingRequest) {
    let assetGroupNode = nodeFromAssetGroup(assetGroup);
    assetGroupNode = this.getNode(assetGroupNode.id);

    if (!assetGroupNode) {
      return;
    }

    (0, _assert.default)(assetGroupNode.type === 'asset_group');
    assetGroupNode.correspondingRequest = correspondingRequest;
    let dependentAssetKeys = [];
    let assetObjects = [];

    for (let asset of assets) {
      let isDirect = !dependentAssetKeys.includes(asset.uniqueKey);
      let dependentAssets = [];

      for (let dep of asset.dependencies.values()) {
        let dependentAsset = assets.find(a => a.uniqueKey === dep.moduleSpecifier);

        if (dependentAsset) {
          dependentAssetKeys.push(dependentAsset.uniqueKey);
          dependentAssets.push(dependentAsset);
        }
      }

      assetObjects.push({
        assetNode: nodeFromAsset(asset),
        dependentAssets,
        isDirect
      });
    }

    this.replaceNodesConnectedTo(assetGroupNode, assetObjects.filter(a => a.isDirect).map(a => a.assetNode));

    for (let {
      assetNode,
      dependentAssets
    } of assetObjects) {
      this.resolveAsset(assetNode, dependentAssets);
    }
  }

  resolveAsset(assetNode, dependentAssets) {
    let depNodes = [];
    let depNodesWithAssets = [];

    for (let dep of assetNode.value.dependencies.values()) {
      let depNode = nodeFromDep(dep);
      let depNodeExisting = this.nodes.get(depNode.id);

      if (depNodeExisting) {
        (0, _assert.default)(depNodeExisting.type === 'dependency');
        depNodeExisting.value = dep;
        depNodes.push(depNodeExisting);
      } else {
        depNodes.push(depNode);
      }

      let dependentAsset = dependentAssets.find(a => a.uniqueKey === dep.moduleSpecifier);

      if (dependentAsset) {
        depNode.complete = true;
        depNodesWithAssets.push([depNode, nodeFromAsset(dependentAsset)]);
      }
    }

    this.replaceNodesConnectedTo(assetNode, depNodes);

    for (let [depNode, dependentAssetNode] of depNodesWithAssets) {
      this.replaceNodesConnectedTo(depNode, [dependentAssetNode]);
    }
  }

  getIncomingDependencies(asset) {
    let node = this.getNode(asset.id);

    if (!node) {
      return [];
    }

    return this.findAncestors(node, node => node.type === 'dependency').map(node => {
      (0, _assert.default)(node.type === 'dependency');
      return node.value;
    });
  }

  traverseAssets(visit, startNode) {
    return this.filteredTraverse(node => node.type === 'asset' ? node.value : null, visit, startNode);
  }

  getEntryAssetGroupNodes() {
    let entryNodes = [];
    this.traverse((node, _, actions) => {
      if (node.type === 'asset_group') {
        entryNodes.push(node);
        actions.skipChildren();
      }
    });
    return entryNodes;
  }

  getEntryAssets() {
    let entries = [];
    this.traverseAssets((asset, ctx, traversal) => {
      entries.push(asset);
      traversal.skipChildren();
    });
    return entries;
  }

  getHash() {
    if (this.hash != null) {
      return this.hash;
    }

    let hash = _crypto.default.createHash('md5'); // TODO: sort??


    this.traverse(node => {
      if (node.type === 'asset') {
        hash.update((0, _nullthrows.default)(node.value.outputHash));
      } else if (node.type === 'dependency' && node.value.target) {
        hash.update(JSON.stringify(node.value.target));
      }
    });
    this.hash = hash.digest('hex');
    return this.hash;
  }

}

exports.default = AssetGraph;