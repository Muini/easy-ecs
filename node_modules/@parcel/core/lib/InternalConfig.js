"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConfig = createConfig;
exports.addDevDependency = addDevDependency;
exports.getInvalidations = getInvalidations;

function createConfig({
  isSource,
  searchPath,
  env,
  result,
  includedFiles,
  watchGlob,
  devDeps,
  shouldRehydrate,
  shouldReload,
  shouldInvalidateOnStartup
}) {
  return {
    isSource,
    searchPath,
    env,
    result: result !== null && result !== void 0 ? result : null,
    resultHash: null,
    includedFiles: includedFiles !== null && includedFiles !== void 0 ? includedFiles : new Set(),
    pkg: null,
    pkgFilePath: null,
    watchGlob,
    devDeps: devDeps !== null && devDeps !== void 0 ? devDeps : new Map(),
    shouldRehydrate: shouldRehydrate !== null && shouldRehydrate !== void 0 ? shouldRehydrate : false,
    shouldReload: shouldReload !== null && shouldReload !== void 0 ? shouldReload : false,
    shouldInvalidateOnStartup: shouldInvalidateOnStartup !== null && shouldInvalidateOnStartup !== void 0 ? shouldInvalidateOnStartup : false
  };
}

function addDevDependency(config, name, version) {
  config.devDeps.set(name, version);
} // TODO: start using edge types for more flexible invalidations


function getInvalidations(config) {
  let invalidations = [];

  if (config.watchGlob != null) {
    invalidations.push({
      action: 'add',
      pattern: config.watchGlob
    });
  }

  for (let filePath of config.includedFiles) {
    invalidations.push({
      action: 'change',
      pattern: filePath
    });
    invalidations.push({
      action: 'unlink',
      pattern: filePath
    });
  }

  return invalidations;
}