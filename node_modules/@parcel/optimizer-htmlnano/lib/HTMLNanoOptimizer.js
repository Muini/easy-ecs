"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _htmlnano = _interopRequireDefault(require("htmlnano"));

var _utils = require("@parcel/utils");

var _plugin = require("@parcel/plugin");

var _posthtml = _interopRequireDefault(require("posthtml"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// flowlint-next-line untyped-import:off
var _default = new _plugin.Optimizer({
  async optimize({
    bundle,
    contents,
    map,
    options
  }) {
    if (!bundle.env.minify) {
      return {
        contents,
        map
      };
    }

    if (typeof contents !== 'string') {
      throw new Error('HTMLNanoOptimizer: Only string contents are currently supported');
    }

    let userConfig = await (0, _utils.loadConfig)(options.inputFS, _path.default.join(options.rootDir, 'index.html'), ['.htmlnanorc', '.htmlnanorc.js']);
    const htmlNanoConfig = {
      minifyJs: false,
      ...(userConfig === null || userConfig === void 0 ? void 0 : userConfig.config)
    };
    return {
      contents: (await (0, _posthtml.default)([(0, _htmlnano.default)(htmlNanoConfig)]).process(contents)).html
    };
  }

});

exports.default = _default;