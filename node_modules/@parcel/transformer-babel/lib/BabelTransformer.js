"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _babelAstUtils = require("@parcel/babel-ast-utils");

var _plugin = require("@parcel/plugin");

var _semver = _interopRequireDefault(require("semver"));

var _babel = _interopRequireDefault(require("./babel7"));

var _config = require("./config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _plugin.Transformer({
  async loadConfig({
    config,
    options,
    logger
  }) {
    await (0, _config.load)(config, options, logger);
  },

  preSerializeConfig({
    config
  }) {
    return (0, _config.preSerialize)(config);
  },

  postDeserializeConfig({
    config,
    options
  }) {
    return (0, _config.postDeserialize)(config, options);
  },

  canReuseAST({
    ast
  }) {
    return ast.type === 'babel' && _semver.default.satisfies(ast.version, '^7.0.0');
  },

  async transform({
    asset,
    config,
    options
  }) {
    // TODO: come up with a better name
    try {
      if (config === null || config === void 0 ? void 0 : config.config) {
        if (asset.meta.babelPlugins != null && Array.isArray(asset.meta.babelPlugins)) {
          await (0, _babel.default)(asset, options, config, asset.meta.babelPlugins);
        } else {
          await (0, _babel.default)(asset, options, config);
        }
      }

      return [asset];
    } catch (e) {
      throw await (0, _babelAstUtils.babelErrorEnhancer)(e, asset);
    }
  },

  generate({
    asset,
    ast,
    options
  }) {
    return (0, _babelAstUtils.generate)({
      asset,
      ast,
      options
    });
  }

});

exports.default = _default;