"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _plugin = require("@parcel/plugin");

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _loadConfig = require("./loadConfig");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// E.g: ~library/file.less
const WEBPACK_ALIAS_RE = /^~[^/]/;

var _default = new _plugin.Transformer({
  loadConfig({
    config
  }) {
    return (0, _loadConfig.load)({
      config
    });
  },

  preSerializeConfig({
    config
  }) {
    return (0, _loadConfig.preSerialize)(config);
  },

  async transform({
    asset,
    options,
    config,
    resolve
  }) {
    asset.type = 'css';
    asset.meta.hasDependencies = false;
    let less = await options.packageManager.require('less', asset.filePath, {
      autoinstall: options.autoinstall
    });
    let code = await asset.getCode();
    let result;

    try {
      let lessConfig = config ? { ...config.config
      } : {};

      if (options.sourceMaps) {
        lessConfig.sourceMap = {};
      }

      lessConfig.filename = asset.filePath;
      lessConfig.plugins = [...(lessConfig.plugins || []), urlPlugin({
        asset
      }), resolvePathPlugin({
        asset,
        resolve
      })];
      result = await less.render(code, lessConfig);
    } catch (err) {
      // For the error reporter
      err.fileName = err.filename;
      err.loc = {
        line: err.line,
        column: err.column
      };
      throw err;
    }

    if (result.map != null) {
      let map = new _sourceMap.default();
      let rawMap = JSON.parse(result.map);
      map.addRawMappings({ ...rawMap,
        sources: rawMap.sources.map(s => _path.default.relative(options.projectRoot, s))
      });
      asset.setMap(map);
    }

    asset.setCode(result.css);
    return [asset];
  }

});

exports.default = _default;

function urlPlugin({
  asset
}) {
  return {
    install(less, pluginManager) {
      const visitor = new less.visitors.Visitor({
        visitUrl(node) {
          if (!node.value.value.startsWith('#') // IE's `behavior: url(#default#VML)`)
          ) {
              node.value.value = asset.addURLDependency(node.value.value, node.currentFileInfo.filename);
            }

          return node;
        }

      });
      visitor.run = visitor.visit;
      pluginManager.addVisitor(visitor);
    }

  };
}

function resolvePathPlugin({
  asset,
  resolve
}) {
  return {
    install(less, pluginManager) {
      class LessFileManager extends less.FileManager {
        supports() {
          return true;
        }

        supportsSync() {
          return false;
        }

        async loadFile(rawFilename, ...args) {
          let filename = rawFilename;

          if (WEBPACK_ALIAS_RE.test(filename)) {
            let correctPath = filename.replace(/^~/, '');
            throw new Error(`The @import path "${filename}" is using webpack specific syntax, which isn't supported by Parcel.\n\nTo @import files from node_modules, use "${correctPath}"`);
          }

          try {
            return await super.loadFile(filename, ...args);
          } catch (err) {
            if (err.type !== 'File') {
              throw err;
            }

            filename = await resolve(asset.filePath, filename);
            return super.loadFile(filename, ...args);
          }
        }

      }

      pluginManager.addFileManager(new LessFileManager());
    }

  };
}