"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var types = _interopRequireWildcard(require("@babel/types"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  MemberExpression(node, {
    asset,
    ast,
    env,
    isBrowser,
    isNode
  }, ancestors) {
    // Inline environment variables accessed on process.env
    if (!isNode && types.matchesPattern(node.object, 'process.env')) {
      let key = types.toComputedKey(node);

      if (types.isStringLiteral(key)) {
        var _env$key$value;

        // Try using the value from the passed env (either from new Parcel
        // options or from dotenv), and fall back to process.env
        let prop = (_env$key$value = env[key.value]) !== null && _env$key$value !== void 0 ? _env$key$value : process.env[key.value];

        if (typeof prop !== 'function') {
          let value = types.valueToNode(prop);
          (0, _utils.morph)(node, value);
          asset.setAST(ast); // asset.meta.env[key.value] = process.env[key.value];
        }
      } // Inline process.browser

    } else if (isBrowser && types.matchesPattern(node, 'process.browser')) {
      // the last ancestor is the node itself, the one before may be it's parent
      const parent = ancestors[ancestors.length - 2];
      const isAssignmentExpression = Boolean(parent && types.isAssignmentExpression(parent) && parent.left === node);

      if (isAssignmentExpression) {
        parent.right = types.booleanLiteral(true);
      } else {
        (0, _utils.morph)(node, types.booleanLiteral(true));
      }
    }
  }

};
exports.default = _default;