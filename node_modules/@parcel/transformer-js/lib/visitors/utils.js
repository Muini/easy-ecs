"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasBinding = hasBinding;
exports.morph = morph;
exports.isInFalsyBranch = isInFalsyBranch;

var types = _interopRequireWildcard(require("@babel/types"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hasBinding(node, name) {
  if (Array.isArray(node)) {
    return node.some(ancestor => hasBinding(ancestor, name));
  } else if ((0, types.isProgram)(node) || (0, types.isBlockStatement)(node) || (0, types.isBlock)(node)) {
    // $FlowFixMe isBlock doesn't refine the type...
    return node.body.some(statement => hasBinding(statement, name));
  } else if ((0, types.isFunctionDeclaration)(node) || (0, types.isFunctionExpression)(node) || (0, types.isArrowFunctionExpression)(node)) {
    return node.id && node.id.name === name || node.params.some(param => (0, types.isIdentifier)(param) && param.name === name);
  } else if ((0, types.isVariableDeclaration)(node)) {
    return node.declarations.some(declaration => (0, types.isIdentifier)(declaration.id) && declaration.id.name === name);
  }

  return false;
} // replace object properties


function morph(object, newProperties) {
  for (let key in object) {
    delete object[key];
  }

  for (let key in newProperties) {
    object[key] = newProperties[key];
  }
}

function isInFalsyBranch(ancestors) {
  // Check if any ancestors are if statements
  return ancestors.some((node, index) => {
    if ((0, types.isIfStatement)(node) || (0, types.isConditionalExpression)(node)) {
      let res = evaluateExpression(node.test);

      if (res && res.confident) {
        // If the test is truthy, exclude the dep if it is in the alternate branch.
        // If the test if falsy, exclude the dep if it is in the consequent branch.
        let child = ancestors[index + 1];
        return res.value ? child === node.alternate : child === node.consequent;
      }
    }
  });
}

function evaluateExpression(node) {
  // Wrap the node in a standalone program so we can traverse it
  let file = types.file(types.program([types.expressionStatement(node)])); // Find the first expression and evaluate it.

  let res = null;
  (0, _traverse.default)(file, {
    Expression(path) {
      res = path.evaluate();
      path.stop();
    }

  });
  return res;
}