"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _assert = _interopRequireDefault(require("assert"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _template = _interopRequireDefault(require("@babel/template"));

var _diagnostic = require("@parcel/diagnostic");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const bufferTemplate = _template.default.expression('Buffer.from(CONTENT, "base64")');

var _default = {
  AssignmentExpression(path) {
    if (!isRequire(path.node.right, 'fs', 'readFileSync')) {
      return;
    }

    for (let name in path.getBindingIdentifiers()) {
      const binding = path.scope.getBinding(name);
      if (!binding) continue;
      binding.path.setData('__require', path.node);
    }
  },

  CallExpression(path, {
    asset,
    logger,
    ast
  }) {
    if (referencesImport(path, 'fs', 'readFileSync')) {
      let vars = {
        __dirname: _path.default.dirname(asset.filePath),
        __filename: _path.default.basename(asset.filePath)
      };
      let filename, res, args;

      try {
        [filename, ...args] = path.get('arguments').map(arg => evaluate(arg, vars));
        filename = _path.default.resolve(filename);
        res = _fs.default.readFileSync(filename, ...args);
      } catch (_err) {
        var _path$node$arguments$, _path$node$loc;

        let err = _err;

        if (err instanceof NodeNotEvaluatedError) {
          // Warn using a code frame
          err.fileName = asset.filePath; // $FlowFixMe the actual stack is useless

          delete err.stack;
          logger.warn((0, _diagnostic.errorToDiagnostic)(err));
          return;
        } // Add location info so we log a code frame with the error
        // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381


        err.loc = path.node.arguments.length > 0 ? (_path$node$arguments$ = path.node.arguments[0].loc) === null || _path$node$arguments$ === void 0 ? void 0 : _path$node$arguments$.start : (_path$node$loc = path.node.loc) === null || _path$node$loc === void 0 ? void 0 : _path$node$loc.start;
        throw err;
      }

      let replacementNode;

      if (Buffer.isBuffer(res)) {
        (0, _assert.default)(res != null);
        replacementNode = bufferTemplate({
          CONTENT: t.stringLiteral(res.toString('base64'))
        });
      } else {
        (0, _assert.default)(typeof res === 'string');
        replacementNode = t.stringLiteral(res);
      }

      (0, _assert.default)(filename != null);
      asset.addIncludedFile({
        filePath: filename
      });
      path.replaceWith(replacementNode);
      asset.setAST(ast); // mark dirty
    }
  }

};
exports.default = _default;

function isRequire(node, name, method) {
  // e.g. require('fs').readFileSync
  if ((0, t.isMemberExpression)(node) && node.property.name === method) {
    node = node.object;
  }

  if (!(0, t.isCallExpression)(node)) {
    return false;
  }

  let {
    callee,
    arguments: args
  } = node;
  let isRequire = (0, t.isIdentifier)(callee) && callee.name === 'require' && args.length === 1 && (0, t.isStringLiteral)(args[0]);

  if (!isRequire) {
    return false;
  }

  if (name && args[0].value !== name) {
    return false;
  }

  return true;
}

function referencesImport(path, name, method) {
  let callee = path.node.callee;
  let bindingPath; // e.g. readFileSync()

  if ((0, t.isIdentifier)(callee)) {
    bindingPath = getBindingPath(path, callee.name);
  } else if ((0, t.isMemberExpression)(callee)) {
    if (callee.property.name !== method) {
      return false;
    } // e.g. fs.readFileSync()


    if ((0, t.isIdentifier)(callee.object)) {
      bindingPath = getBindingPath(path, callee.object.name); // require('fs').readFileSync()
    } else if (isRequire(callee.object, name)) {
      return true;
    }
  } else {
    return false;
  }

  if (!bindingPath) {
    return;
  }

  let bindingNode = bindingPath.getData('__require') || bindingPath.node;
  let parent = bindingPath.parent;

  if ((0, t.isImportDeclaration)(parent)) {
    // e.g. import fs from 'fs';
    let {
      node: bindingPathNode
    } = bindingPath;

    if ((0, t.isImportSpecifier)(bindingPathNode) && bindingPathNode.imported.name !== method) {
      return false;
    }

    return parent.source.value === name;
  } else if ((0, t.isVariableDeclarator)(bindingNode) || (0, t.isAssignmentExpression)(bindingNode)) {
    // e.g. var ... = require('fs');
    let left = (0, t.isVariableDeclarator)(bindingNode) ? bindingNode.id : bindingNode.left;
    let right = (0, t.isVariableDeclarator)(bindingNode) ? bindingNode.init : bindingNode.right;

    if ((0, t.isObjectPattern)(left)) {
      // e.g. var {readFileSync} = require('fs');
      (0, _assert.default)((0, t.isIdentifier)(callee));
      let prop = left.properties.find(p => (0, t.isObjectProperty)(p) && (0, t.isIdentifier)(p.value) && p.value.name === callee.name);
      (0, _assert.default)(!prop || (0, t.isObjectProperty)(prop));

      if (!prop || prop.key.name !== method) {
        return false;
      }
    } else if (!(0, t.isIdentifier)(left)) {
      return false;
    }

    return isRequire(right, name, method);
  }

  return false;
}

function getBindingPath(path, name) {
  let binding = path.scope.getBinding(name);
  return binding && binding.path;
}

class NodeNotEvaluatedError extends Error {
  constructor(node) {
    var _node$loc;

    super();

    _defineProperty(this, "node", void 0);

    _defineProperty(this, "loc", void 0);

    this.message = 'Cannot statically evaluate fs argument';
    this.node = node;
    this.loc = (_node$loc = node.loc) === null || _node$loc === void 0 ? void 0 : _node$loc.start;
  }

}

function evaluate(path, vars) {
  // Inline variables
  path.traverse({
    Identifier(ident) {
      let key = ident.node.name;

      if (key in vars) {
        ident.replaceWith(t.valueToNode(vars[key]));
      }
    }

  });
  let {
    node
  } = path;

  if ((0, t.isCallExpression)(node) && referencesImport( // $FlowFixMe yes it is
  path, 'path', 'join') && node.arguments.every(n => (0, t.isStringLiteral)(n))) {
    // e.g. path.join("literal", "another_literal")
    return _path.default.join(...node.arguments.map(n => {
      (0, _assert.default)((0, t.isStringLiteral)(n));
      return n.value;
    }));
  } else {
    // try to evaluate other cases
    let res = path.evaluate();

    if (!res.confident) {
      throw new NodeNotEvaluatedError(path.node);
    }

    return res.value;
  }
}