"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _template = _interopRequireDefault(require("@babel/template"));

var _semver = _interopRequireDefault(require("semver"));

var _plugin = require("@parcel/plugin");

var _dependencies = _interopRequireDefault(require("./visitors/dependencies"));

var _process = _interopRequireDefault(require("./visitors/process"));

var _fs = _interopRequireDefault(require("./visitors/fs"));

var _globals = _interopRequireDefault(require("./visitors/globals"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _babylonWalk = require("@parcel/babylon-walk");

var babelCore = _interopRequireWildcard(require("@babel/core"));

var _scopeHoisting = require("@parcel/scope-hoisting");

var _babelAstUtils = require("@parcel/babel-ast-utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IMPORT_RE = /\b(?:import\b|export\b|require\s*\()/;
const ENV_RE = /\b(?:process\.env)\b/;
const BROWSER_RE = /\b(?:process\.browser)\b/;
const GLOBAL_RE = /\b(?:process|__dirname|__filename|global|Buffer|define)\b/;
const FS_RE = /\breadFileSync\b/;
const SW_RE = /\bnavigator\s*\.\s*serviceWorker\s*\.\s*register\s*\(/;
const WORKER_RE = /\bnew\s*(?:Shared)?Worker\s*\(/; // Sourcemap extraction
// const SOURCEMAP_RE = /\/\/\s*[@#]\s*sourceMappingURL\s*=\s*([^\s]+)/;
// const DATA_URL_RE = /^data:[^;]+(?:;charset=[^;]+)?;base64,(.*)/;

function canHaveDependencies(code) {
  return IMPORT_RE.test(code) || GLOBAL_RE.test(code) || SW_RE.test(code) || WORKER_RE.test(code);
}

var _default = new _plugin.Transformer({
  canReuseAST({
    ast
  }) {
    return ast.type === 'babel' && _semver.default.satisfies(ast.version, '^7.0.0');
  },

  async parse({
    asset,
    options
  }) {
    let code = await asset.getCode();

    if (!asset.env.scopeHoist && !canHaveDependencies(code) && !ENV_RE.test(code) && !BROWSER_RE.test(code) && !FS_RE.test(code)) {
      return null;
    }

    return (0, _babelAstUtils.parse)({
      asset,
      code,
      options
    });
  },

  async transform({
    asset,
    options,
    logger
  }) {
    // When this asset is an bundle entry, allow that bundle to be split to load shared assets separately.
    // Only set here if it is null to allow previous transformers to override this behavior.
    if (asset.isSplittable == null) {
      asset.isSplittable = true;
    }

    asset.type = 'js';
    let ast = await asset.getAST();

    if (!ast) {
      return [asset];
    }

    let code = asset.isASTDirty() ? null : await asset.getCode(); // Inline process/environment variables

    if (!asset.env.isNode() && (code == null || ENV_RE.test(code)) || asset.env.isBrowser() && (code == null || BROWSER_RE.test(code))) {
      (0, _babylonWalk.ancestor)(ast.program, _process.default, {
        asset,
        ast,
        env: options.env,
        isNode: asset.env.isNode(),
        isBrowser: asset.env.isBrowser()
      });
    }

    let isASTDirty;

    if (!asset.env.isNode()) {
      // Inline fs calls, run before globals to also collect Buffer
      if (code == null || FS_RE.test(code)) {
        // Check if we should ignore fs calls
        // See https://github.com/defunctzombie/node-browser-resolve#skip
        let pkg = await asset.getPackage();
        let ignore = pkg && pkg.browser && typeof pkg.browser === 'object' && pkg.browser.fs === false;

        if (!ignore) {
          _traverse.default.cache.clearScope();

          (0, _traverse.default)(ast.program, _fs.default, null, {
            asset,
            logger,
            ast
          });
        }
      } // Insert node globals


      if (code == null || GLOBAL_RE.test(code)) {
        let globals = new Map();
        (0, _babylonWalk.ancestor)(ast.program, _globals.default, {
          asset,
          globals
        });

        if (globals.size > 0) {
          ast.program.program.body.unshift(...[...globals.values()].filter(Boolean).map(({
            code
          }) => _template.default.statement(code)()));
          isASTDirty = true;
        }
      }
    } // Collect dependencies


    if (code == null || canHaveDependencies(code)) {
      (0, _babylonWalk.ancestor)(ast.program, _dependencies.default, {
        asset,
        ast,
        options
      });
    } // If there's a hashbang, remove it and store it on the asset meta.
    // During packaging, if this is the entry asset, it will be prepended to the
    // packaged output.


    if (ast.program.program.interpreter != null) {
      asset.meta.interpreter = ast.program.program.interpreter.value;
      delete ast.program.program.interpreter;
      isASTDirty = true;
    }

    if (isASTDirty) {
      asset.setAST(ast);
    }

    if (asset.env.scopeHoist) {
      (0, _scopeHoisting.hoist)(asset, ast);
    } else if (asset.meta.isES6Module) {
      // Convert ES6 modules to CommonJS
      let res = await babelCore.transformFromAstAsync(ast.program, code !== null && code !== void 0 ? code : undefined, {
        code: false,
        ast: true,
        filename: asset.filePath,
        babelrc: false,
        configFile: false,
        plugins: [require('@babel/plugin-transform-modules-commonjs')]
      });
      asset.setAST({
        type: 'babel',
        version: '7.0.0',
        program: res.ast
      });
    }

    return [asset];
  },

  generate({
    asset,
    ast,
    options
  }) {
    return (0, _babelAstUtils.generate)({
      asset,
      ast,
      options
    });
  }

});

exports.default = _default;