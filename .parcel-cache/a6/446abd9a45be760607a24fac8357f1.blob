"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CharacterRenderer = exports.PlayerMovement = exports.NPCMovement = exports.Soldier = exports.Player = exports.Character = exports.NPC = exports.Controllable = exports.Renderable = exports.Health = exports.Movable = exports.Position = void 0;

var _ecs = require("../core/ecs");

var _addons = require("../core/addons");

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Position extends _ecs.Component {}

exports.Position = Position;

_defineProperty(Position, "x", 0);

_defineProperty(Position, "y", 0);

_defineProperty(Position, "rotation", 0);

class Movable extends _ecs.Component {}

exports.Movable = Movable;

_defineProperty(Movable, "speed", 0);

class Health extends _ecs.Component {}

exports.Health = Health;

_defineProperty(Health, "health", 0);

_defineProperty(Health, "maxHealth", 100);

class Renderable extends _ecs.Component {}

exports.Renderable = Renderable;

_defineProperty(Renderable, "color", `rgba(255, 255, 255, 1.0)`);

_defineProperty(Renderable, "size", 8);

class Controllable extends _ecs.Component {}

exports.Controllable = Controllable;

class NPC extends _ecs.Component {}

exports.NPC = NPC;

class Character extends _ecs.Entity {}

exports.Character = Character;

_defineProperty(Character, "components", [Position, Movable, Health, Renderable]);

class Player extends Character {}

exports.Player = Player;

_defineProperty(Player, "components", [..._get(_getPrototypeOf(Player), "components", Player), Controllable]);

class Soldier extends Character {}

exports.Soldier = Soldier;

_defineProperty(Soldier, "components", [..._get(_getPrototypeOf(Soldier), "components", Soldier), NPC]);

class NPCMovement extends _ecs.System {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "dependencies", [Position, Movable, NPC]);

    _defineProperty(this, "onUpdate", entities => {
      entities.forEach(entity => {
        entity.x += entity.speed * _addons.Time.delta;
      });
    });
  }

}

exports.NPCMovement = NPCMovement;

class PlayerMovement extends _ecs.System {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "dependencies", [Controllable, Movable]);

    _defineProperty(this, "onUpdate", entities => {
      entities.forEach(entity => {
        const amount = entity.speed * _addons.Time.delta;

        _addons.Input.keypress.forEach(key => {
          switch (key) {
            case _addons.Input.INPUT_LEFT:
              entity.x -= amount;
              entity.rotation = Math.PI;
              break;

            case _addons.Input.INPUT_RIGHT:
              entity.x += amount;
              entity.rotation = 0;
              break;

            case _addons.Input.INPUT_UP:
              entity.y -= amount;
              entity.rotation = -Math.PI / 2;
              break;

            case _addons.Input.INPUT_DOWN:
              entity.y += amount;
              entity.rotation = Math.PI / 2;
              break;
          }
        });
      });
    });
  }

}

exports.PlayerMovement = PlayerMovement;

class CharacterRenderer extends _ecs.System {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "dependencies", [Renderable]);

    _defineProperty(this, "onUpdate", entities => {
      entities.forEach(entity => {
        _addons.Renderer.ctx.translate(entity.x, entity.y);

        _addons.Renderer.ctx.rotate(entity.rotation);

        _addons.Renderer.ctx.fillStyle = entity.color;

        _addons.Renderer.ctx.beginPath();

        _addons.Renderer.ctx.moveTo(entity.size, 0);

        _addons.Renderer.ctx.lineTo(-entity.size, -entity.size / 1.5);

        _addons.Renderer.ctx.lineTo(-entity.size, entity.size / 1.5);

        _addons.Renderer.ctx.fill();

        _addons.Renderer.ctx.setTransform(1, 0, 0, 1, 0, 0);
      });
    });
  }

}

exports.CharacterRenderer = CharacterRenderer;